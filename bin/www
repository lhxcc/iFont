#!/usr/bin/env node

/**
 * Module dependencies.
 */

const path = require('path');
const http = require('http');
const config = require('config');

const app = require('../app').app;
const version = require('../package.json').version;
const logger = require('../lib/common/log').getLogger(path.basename(__filename));

logger.info('VERSION:', version, ', NODE_ENV:', app.env, ', NODE_CONFIG_DIR:', process.env.NODE_CONFIG_DIR || 'undefined');
logger.info('Config path:', config.get('configPath'));

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const res = parseInt(val, 10);

    if (isNaN(res)) {
        // named pipe
        return val;
    }

    if (res >= 0) {
        // port number
        return res;
    }

    return false;
}
/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || config.get('server.port'));

/**
 * Create HTTP server.
 */

const server = http.createServer(app.callback());

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);

/**
 * Event listener for HTTP server "error" event.
 */

server.on('error', (error) => {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string' ?
        `Pipe ${port}` :
        `Port ${port}`;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            logger.error(`${bind} requires elevated privileges`);
            process.exit(1);
            break;
        case 'EADDRINUSE':
            logger.error(`${bind} is already in use`);
            process.exit(1);
            break;
        default:
            throw error;
    }
});

/**
 * Event listener for HTTP server "listening" event.
 */

server.on('listening', () => {
    const addr = server.address();
    const bind = typeof addr === 'string' ?
        `pipe ${addr}` :
        `port ${addr.port}`;
    logger.info(`listening on ${bind}`);
});